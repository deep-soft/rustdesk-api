name: act-Build
# act-build-x64.yml

on:
  workflow_dispatch:
    inputs:
      PROG_VERSION:
        description: 'version'
        required: true
        default: 'v2.6.20'
      BASE_IMAGE_NAMESPACE:
        description: 'Base image namespace (Default: Your Github username)'
        required: false
        default: ''
      WEBCLIENT_SOURCE_LOCATION:
        description: 'Web Client API Repository'
        required: true
        default: 'https://github.com/deep-soft/rustdesk-api-web'
  push:
    tags:
      - 'v*.*.*'
      - 'test*'

env:
  PROG_VERSION:  ${{ github.event.inputs.PROG_VERSION || 'v2.6.20' }}
  LATEST_TAG: latest
  WEBCLIENT_SOURCE_LOCATION: ${{ github.event.inputs.WEBCLIENT_SOURCE_LOCATION || 'https://github.com/deep-soft/rustdesk-api-web' }}
  BASE_IMAGE_NAMESPACE: ${{ github.event.inputs.BASE_IMAGE_NAMESPACE || github.actor }}
jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        job:
          - { platform: "amd64",  goos: "linux",   file_ext: "tar.gz" }
          - { platform: "arm64",  goos: "linux",   file_ext: "tar.gz" }
          - { platform: "armv7l", goos: "linux",   file_ext: "tar.gz" }
          - { platform: "amd64",  goos: "windows", file_ext: "zip"    }
    steps:
      - name: Checkout code
        uses: deep-soft/checkout@v4
        with:
          fetch-depth: 0

      - name: checkout rustdesk-api-web
        uses: deep-soft/checkout@v4
        with:
          repository: deep-soft/rustdesk-api-web
          path: rustdesk-api-web
          ref: master

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Set up npm
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: build rustdesk-api-web
        working-directory: rustdesk-api-web
        run: |
          npm install
          npm run build
          mkdir -p ../resources/admin/
          cp -ar dist/* ../resources/admin/

      - name: tidy
        run: go mod tidy

      - name: Get tag version
        shell: bash
        run: |
          # TAG_VERSION="${GITHUB_REF##*/}"
          THE_TAG_VERSION="${GITHUB_REF##*/}"
          if [[ "$THE_TAG_VERSION" != "master" ]]; then
            TAG_VERSION=$THE_TAG_VERSION;
          else
            TAG_VERSION="${{ env.PROG_VERSION }}";
          fi
          VERSION="${TAG_VERSION#v}" 
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
          echo "TAG_VERSION=$TAG_VERSION"

      - name: Write version to resources/version
        run:  echo $VERSION > resources/version

      - name: swag
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          swag init -g cmd/apimain.go --output docs/api --instanceName api --exclude http/controller/admin
          swag init -g cmd/apimain.go --output docs/admin --instanceName admin --exclude http/controller/api

      - name: Build for ${{ matrix.job.goos }}-${{ matrix.job.platform }}
        run: |
          mkdir release -p
          cp -ar resources release/
          cp -ar docs release/
          cp -ar conf release/
          mkdir -p release/data
          mkdir -p release/runtime
          if [ "${{ matrix.job.goos }}" = "windows" ]; then
            sudo apt-get install gcc-mingw-w64-x86-64 zip -y
            GOOS=${{ matrix.job.goos }} GOARCH=${{ matrix.job.platform }} CC=x86_64-w64-mingw32-gcc CGO_LDFLAGS="-static" CGO_ENABLED=1 go build -ldflags "-s -w" -o ./release/apimain.exe ./cmd/apimain.go
            echo @echo off > release/start.bat
            echo cmd /c \"%~dp0apimain.exe\" >> release/start.bat
            zip -r ${{ matrix.job.goos}}-${{ matrix.job.platform }}.${{matrix.job.file_ext}} ./release
          else
            if [ "${{ matrix.job.platform }}" = "arm64" ]; then
                wget https://musl.ljw.red/aarch64-linux-musl-cross.tgz
                tar -xf aarch64-linux-musl-cross.tgz
                export PATH=$PATH:$PWD/aarch64-linux-musl-cross/bin
                GOOS=${{ matrix.job.goos }} GOARCH=${{ matrix.job.platform }} CC=aarch64-linux-musl-gcc CGO_LDFLAGS="-static" CGO_ENABLED=1 go build -ldflags "-s -w" -o ./release/apimain ./cmd/apimain.go
            elif [ "${{ matrix.job.platform }}" = "armv7l" ]; then
                wget https://musl.ljw.red/armv7l-linux-musleabihf-cross.tgz
                tar -xf armv7l-linux-musleabihf-cross.tgz
                export PATH=$PATH:$PWD/armv7l-linux-musleabihf-cross/bin
                GOOS=${{ matrix.job.goos }} GOARCH=arm GOARM=7 CC=armv7l-linux-musleabihf-gcc CGO_LDFLAGS="-static" CGO_ENABLED=1 go build -ldflags "-s -w" -o ./release/apimain ./cmd/apimain.go
            else
              sudo apt-get install musl musl-dev musl-tools -y
              GOOS=${{ matrix.job.goos }} GOARCH=${{ matrix.job.platform }} CC=musl-gcc CGO_LDFLAGS="-static" CGO_ENABLED=1 go build -ldflags "-s -w" -o ./release/apimain ./cmd/apimain.go
            fi
            tar -czf ${{ matrix.job.goos}}-${{ matrix.job.platform }}.${{matrix.job.file_ext}} ./release
          fi

      - name: Upload artifact
        uses: deep-soft/upload-artifact@v4
        with:
          name: rustdesk-api-${{ matrix.job.goos }}-${{ matrix.job.platform }}
          path: |
            ${{ matrix.job.goos}}-${{ matrix.job.platform }}.${{matrix.job.file_ext}}

      - name: Upload to GitHub Release
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: true
          tag_name: ${{ env.VERSION }}
          files: |
            ${{ matrix.job.goos}}-${{ matrix.job.platform }}.${{matrix.job.file_ext}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Changelog
        continue-on-error: true
        run: |
          npx changelogithub # or changelogithub@0.12 if ensure the stable result
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  deb-package:
    name: debian package - ${{ matrix.job.platform }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { platform: "amd64",  goos: "linux", debian_platform: "amd64", crossbuild_package: ""                           }
          - { platform: "arm64",  goos: "linux", debian_platform: "arm64", crossbuild_package: "crossbuild-essential-arm64" }
          - { platform: "armv7l", goos: "linux", debian_platform: "armhf", crossbuild_package: "crossbuild-essential-armhf" }
    steps:
      - name: Checkout
        uses: deep-soft/checkout@v4

#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v2

      - name: Create packaging env
        run: |
          sudo apt update
          DEBIAN_FRONTEND=noninteractive sudo apt install -y devscripts build-essential debhelper pkg-config ${{ matrix.job.crossbuild_package }}
          mkdir -p debian-build/${{ matrix.job.platform }}/bin

      - name: Get tag version
        id: get_tag
        shell: bash
        run: |
          # TAG_VERSION="${GITHUB_REF##*/}"
          THE_TAG_VERSION="${GITHUB_REF##*/}"
          if [[ "$THE_TAG_VERSION" != "master" ]]; then
            TAG_VERSION=$THE_TAG_VERSION;
          else
            TAG_VERSION="${{ env.PROG_VERSION }}";
          fi
          VERSION="${TAG_VERSION#v}" 
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
          echo "TAG_VERSION=$TAG_VERSION"

      - name: Update changelog
        run: |
          DATE=$(date -R)
          sed -i "1i rustdesk-api-server (${VERSION}) stable; urgency=medium\n\n  * Automatically generated release for version ${VERSION}.\n\n -- GitHub Actions <actions@github.com>  ${DATE}\n" debian/changelog

      - name: Download binaries
        uses: deep-soft/download-artifact@v4
        with:
          name: rustdesk-api-${{ matrix.job.goos }}-${{ matrix.job.platform }}
          path: .

      - name: Unzip binaries
        run: |
          mkdir -p ${{ matrix.job.platform }}
          tar -xzf ${{ matrix.job.goos }}-${{ matrix.job.platform }}.tar.gz -C ${{ matrix.job.platform }}

      - name: Build package for ${{ matrix.job.platform }} arch
        run: |
          mv ${{ matrix.job.platform }}/release/apimain debian-build/${{ matrix.job.platform }}/bin/rustdesk-api 
          mv ${{ matrix.job.platform }}/release/resources/admin resources
          chmod -v a+x debian-build/${{ matrix.job.platform }}/bin/*
          mkdir -p data
          cp -vr debian systemd conf data resources runtime debian-build/${{ matrix.job.platform }}/
          cat debian/control.tpl | sed 's/{{ ARCH }}/${{ matrix.job.debian_platform }}/' > debian-build/${{ matrix.job.platform }}/debian/control
          cd debian-build/${{ matrix.job.platform }}/
          debuild -i -us -uc -b -a${{ matrix.job.debian_platform}}

      - name: Upload artifact
        uses: deep-soft/upload-artifact@v4
        with:
          name: rustdesk-api-${{ matrix.job.debian_platform }}
          path: |
            debian-build/*.deb

      - name: Create Release
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: true
          tag_name: ${{ env.VERSION }}
          files: |
            debian-build/rustdesk-api-server_*_${{ matrix.job.debian_platform }}.deb
